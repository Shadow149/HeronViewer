#version 430 core

layout (local_size_x = 32, local_size_y = 32, local_size_z = 1) in;

// ----------------------------------------------------------------------------
//
// uniforms
//
// ----------------------------------------------------------------------------

layout(rgba32f, binding = 0) uniform writeonly image2D imgOutput;
	
layout(binding=1) uniform readonly sampler2D texture1;

layout(std430, binding=2) buffer hist {
    uint elements[];
};

float calcLum(vec4 v) {
	return (0.2126 * v.x + 0.7152 * v.y + 0.0722 * v.z);
}
void main() {
    ivec2 texSize = textureSize(texture1, 0);
    ivec2 pixelCoord = ivec2(gl_GlobalInvocationID.xy);
	
  
    // Ensure the current invocation is within the texture bounds
    if (pixelCoord.x < texSize.x && pixelCoord.y < texSize.y) {
        vec4 texColor = texelFetch(texture1, pixelCoord, 0);
        texColor.x = pow(texColor.x,2.5);
        texColor.y = pow(texColor.y,2.5);
        texColor.z = pow(texColor.z,2.5);
      
        imageStore(imgOutput, pixelCoord, vec4(texColor.bgr,1.0));

        // Convert color to grayscale
        float grayscale = dot(texColor.bgr, vec3(0.299, 0.587, 0.114));
      
        // Convert grayscale value to histogram bin index
        uint binIndex = uint(grayscale * 255.0);
      
        // Atomic increment to update the histogram bin value
        atomicAdd(elements[binIndex], 1);
    }

}
#version 440 core

#define SMOOTHNESS 255
#define MAX_BEZIER_POINTS 10
#define MAX_BEZIER_POINTS_2X 20

layout (local_size_x = 32, local_size_y = 32, local_size_z = 1) in;

// ----------------------------------------------------------------------------
//
// uniforms
//
// ----------------------------------------------------------------------------

layout(rgba32f, binding = 0) uniform image2D imgOutput;
	
layout(binding=1) uniform sampler2D texture1;


layout(rgba32f, binding = 2) uniform image2D imgOutput_small;
	
layout(binding=3) uniform sampler2D texture1_small;

uniform bool low_res;


uniform float[4] high;
uniform float[4] mid;
uniform float[4] low;
uniform float[4] expo;
uniform float[4] contrast;
uniform float[4] whites;

uniform float sat_ref;

uniform float[4] lift;
uniform float[4] gamma;
uniform float[4] gain;
uniform float[4] offset;

uniform float[9] sharp_kernel;

uniform float cdf[256];
uniform bool histogram_loaded;

shared uint local_bins[256];

uniform float dn_sigma;
uniform float dn_ksigma;
uniform float dn_thresh;

uniform float yiq_y;
uniform float yiq_z;
uniform float xyz_y;
uniform float xyz_z;
uniform float noise;
uniform bool noise_selected;

// Encoded vecs as [x, y, x1, y1, ...]
uniform float hue_hue[MAX_BEZIER_POINTS_2X];
uniform float hue_sat[MAX_BEZIER_POINTS_2X];
uniform float hue_lum[MAX_BEZIER_POINTS_2X];

uniform float sat_hue[MAX_BEZIER_POINTS_2X];
uniform float sat_sat[MAX_BEZIER_POINTS_2X];
uniform float sat_lum[MAX_BEZIER_POINTS_2X];

uniform float lum_hue[MAX_BEZIER_POINTS_2X];
uniform float lum_sat[MAX_BEZIER_POINTS_2X];
uniform float lum_lum[MAX_BEZIER_POINTS_2X];

uniform bool clip;
uniform bool b4;
uniform bool bw;
uniform bool inv;

uniform float sat;
uniform float wb;
uniform float tint;

float coefs[16] = {
	-1.0f, 2.0f,-1.0f, 0.0f,
	3.0f,-5.0f, 0.0f, 2.0f,
	-3.0f, 4.0f, 1.0f, 0.0f,
	1.0f,-1.0f, 0.0f, 0.0f
};

vec3 kelvin_table[19] = {
    vec3(255,56,0),
    vec3(255,109,0),
    vec3(255,137,18),
    vec3(255,161,72),
    vec3(255,180,107),
    vec3(255,196,137),
    vec3(255,209,163),
    vec3(255,219,186),
    vec3(255,228,206),
    vec3(255,236,224),
    vec3(255,243,239),
    vec3(255,249,253),
    vec3(245,243,255),
    vec3(235,238,255),
    vec3(227,233,255),
    vec3(220,229,255),
    vec3(214,225,255),
    vec3(208,222,255),
    vec3(204,219,255)
};

float rand( vec2 p )
{
    vec2 K1 = vec2(
        23.14069263277926, // e^pi (Gelfond's constant)
         2.665144142690225 // 2^sqrt(2) (Gelfondï¿½Schneider constant)
    );
    return fract( cos( dot(p,K1) ) * 12345.6789 );
}

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//  Copyright (c) 2018-2019 Michele Morrone
//  All rights reserved.
//
//  https://michelemorrone.eu - https://BrutPitt.com
//
//  me@michelemorrone.eu - brutpitt@gmail.com
//  twitter: @BrutPitt - github: BrutPitt
//  
//  https://github.com/BrutPitt/glslSmartDeNoise/
//
//  This software is distributed under the terms of the BSD 2-Clause license
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

#define INV_SQRT_OF_2PI 0.39894228040143267793994605993439  // 1.0/SQRT_OF_2PI
#define INV_PI 0.31830988618379067153776752674503

//  smartDeNoise - parameters
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
//  sampler2D tex     - sampler image / texture
//  vec2 uv           - actual fragment coord
//  float sigma  >  0 - sigma Standard Deviation
//  float kSigma >= 0 - sigma coefficient 
//      kSigma * sigma  -->  radius of the circular kernel
//  float threshold   - edge sharpening threshold 

vec4 smartDeNoise(sampler2D tex, ivec2 uv, float sigma, float kSigma, float threshold)
{
    float radius = round(kSigma*sigma);
    float radQ = radius * radius;

    float invSigmaQx2 = .5 / (sigma * sigma);      // 1.0 / (sigma^2 * 2.0)
    float invSigmaQx2PI = INV_PI * invSigmaQx2;    // 1/(2 * PI * sigma^2)

    float invThresholdSqx2 = .5 / (threshold * threshold);     // 1.0 / (sigma^2 * 2.0)
    float invThresholdSqrt2PI = INV_SQRT_OF_2PI / threshold;   // 1.0 / (sqrt(2*PI) * sigma^2)

    vec4 centrPx = texelFetch(tex,uv, 0); 

    float zBuff = 0.0;
    vec4 aBuff = vec4(0.0);
    vec2 size = vec2(textureSize(tex, 0));

    vec2 d;
    for (d.x=-radius; d.x <= radius; d.x++) {
        float pt = sqrt(radQ-d.x*d.x);       // pt = yRadius: have circular trend
        for (d.y=-pt; d.y <= pt; d.y++) {
            float blurFactor = exp( -dot(d , d) * invSigmaQx2 ) * invSigmaQx2PI;

            vec4 walkPx =  texelFetch(tex,ivec2(uv+d/size), 0);
            vec4 dC = walkPx-centrPx;
            float deltaFactor = exp( -dot(dC, dC) * invThresholdSqx2) * invThresholdSqrt2PI * blurFactor;

            zBuff += deltaFactor;
            aBuff += deltaFactor*walkPx;
        }
    }
    return aBuff/zBuff;
}



// [src] http://iquilezles.org/www/articles/minispline/minispline.htm
// key format (for dim == 1) is (t0,x0,t1,x1 ...)
// key format (for dim == 2) is (t0,x0,y0,t1,x1,y1 ...)
// key format (for dim == 3) is (t0,x0,y0,z0,t1,x1,y1,z1 ...)
float spline(const float key[MAX_BEZIER_POINTS_2X], float t)
{
    const int size = 2;

    // find key
    int k = 0;
    while (key[k * size] < t)
        k++;

    const float key0 = key[(k - 1) * size];
    const float key1 = key[k * size];

    // interpolant
    const float h = (t - key0) / (key1 - key0);

    // init result
    float v = 0.0f;

    // add basis functions
    for (int i = 0; i < 4; ++i)
    {
        const float b = 0.5f * (((coefs[(4 * i) + 0] * h + coefs[(4 * i) + 1]) * h + coefs[(4 * i) + 2]) * h + coefs[(4 * i) + 3]);

        const int kn = clamp(k + i - 2, 0, MAX_BEZIER_POINTS - 1);
        v += b * key[kn * size + 1];
    }
	return v;
}

float CurveValueSmooth(float p, const float points[MAX_BEZIER_POINTS_2X])
{
	// TODO ifs not really needed
    if (p < 0)
        return points[1]; // the first points y value

    return spline(points, p);
}


float remap(float v, float a, float b, float c, float d)
{
    return (c + (d - c) * (v - a) / (b - a));
}

vec2 remap(const vec2 v, const vec2 a, const vec2 b, const vec2 c, const vec2 d)
{
    return vec2(remap(v.x, a.x, b.x, c.x, d.x), remap(v.y, a.y, b.y, c.y, d.y));
}

float SmoothCurveValue(float x, const vec2 rangeMin, const vec2 rangeMax, const float points[MAX_BEZIER_POINTS_2X]) {   

    float px = remap(x, 0, 1, rangeMin.x, rangeMax.x);
    float qx = remap(x + 1/float(SMOOTHNESS), 0, 1, rangeMin.x, rangeMax.x);

    const float py = CurveValueSmooth(px, points);
    const float qy = CurveValueSmooth(qx, points);

    vec2 p = remap(vec2(px, py), rangeMin, rangeMax, vec2(0,0), vec2(1,1));
    vec2 q = remap(vec2(qx, qy), rangeMin, rangeMax, vec2(0,0), vec2(1,1));
    p.y = 1.0f - p.y;
    q.y = 1.0f - q.y;

    return py;
}


float calcLum(vec3 v) {
    return dot(v, vec3(0.299, 0.587, 0.114));
}
float calcLum(vec4 v) {
    return calcLum(v.xyz);
}

// #ifndef saturate
// #define saturate(v) clamp(v,0.,1.)
// //      clamp(v,0.,1.)
// #endif

float saturate_(float v) {
	if (v <= 0.0) v = 0.;
	else if (v >= 1.0) v = 1.;
	return v;
}

vec3 saturate_(vec3 v) {
	if (v.x <= 0.0) v.x = 0.;
	else if (v.x >= 1.0) v.x = 1.;

	if (v.y <= 0.0) v.y = 0.;
	else if (v.y >= 1.0) v.y = 1.;

	if (v.z <= 0.0) v.z = 0.;
	else if (v.z >= 1.0) v.z = 1.;

	return v;
}

vec4 saturate_(vec4 v) {
	return vec4(saturate_(v.xyz), v.w);
}

vec3 rgb2xyz(vec3 v) {
	mat3 m = mat3(vec3(0.412453,0.212671,0.019334), vec3(0.357580,0.715160,0.119193), vec3(0.180423,0.072169,0.950227));
	return m*v;
}

vec3 xyz2rgb(vec3 v) {
	mat3 m = mat3(vec3(3.240479,-0.969256,0.055648), vec3(-1.537150,1.875992,-0.204043), vec3(-0.498535,0.041556,1.057311));
	return m*v;
}

vec3 rgb2yiq(vec3 v) {
	mat3 m = mat3(vec3(0.299,0.5959,0.2115),vec3(0.587,-0.2746,-0.5227),vec3(0.114,-0.3213,0.3112));
	return m*v;
}

vec3 yiq2rgb(vec3 v) {
	mat3 m = mat3(vec3(1,1,1),vec3(0.956,-0.272,-1.106),vec3(0.619,-0.647,1.703));
	return m*v;
}

vec3 xyY2xyz(vec3 v) {
	// v = xyY
	vec3 r = vec3(0);
	r.x = (v.z / v.y) * v.x;
	r.y = v.z;
	r.z = (v.z / v.y) * (1-v.x-v.y);
	return r;
}


vec3 hue2rgb(float hue){
	hue=fract(hue);
	return saturate_(vec3(
		abs(hue*6.-3.)-1.,
		2.-abs(hue*6.-2.),
		2.-abs(hue*6.-4.)
	));
}


//RGB to HSL (hue, saturation, lightness/luminance).
//Source: https://gist.github.com/yiwenl/745bfea7f04c456e0101
vec3 rgb2hsl(vec3 c){
	float cMin=min(min(c.r,c.g),c.b),
	      cMax=max(max(c.r,c.g),c.b),
	      delta=cMax-cMin;
	vec3 hsl=vec3(0.,0.,(cMax+cMin)/2.);
	if(delta!=0.0){ //If it has chroma and isn't gray.
		if(hsl.z<.5){
			hsl.y=delta/(cMax+cMin); //Saturation.
		}else{
			hsl.y=delta/(2.-cMax-cMin); //Saturation.
		}
		float deltaR=(((cMax-c.r)/6.)+(delta/2.))/delta,
		      deltaG=(((cMax-c.g)/6.)+(delta/2.))/delta,
		      deltaB=(((cMax-c.b)/6.)+(delta/2.))/delta;
		//Hue.
		if(c.r==cMax){
			hsl.x=deltaB-deltaG;
		}else if(c.g==cMax){
			hsl.x=(1./3.)+deltaR-deltaB;
		}else{ //if(c.b==cMax){
			hsl.x=(2./3.)+deltaG-deltaR;
		}
		hsl.x=fract(hsl.x);
	}
	return hsl;
}

vec3 hsl2rgb(vec3 hsl){
	if(hsl.y==0.){
		return vec3(hsl.z); //Luminance.
	}else{
		float b;
		if(hsl.z<.5){
			b=hsl.z*(1.+hsl.y);
		}else{
			b=hsl.z+hsl.y-hsl.y*hsl.z;
		}
		float a=2.*hsl.z-b;
		return a+hue2rgb(hsl.x)*(b-a);
		/*vec3(
			hueRamp(a,b,hsl.x+(1./3.)),
			hueRamp(a,b,hsl.x),
			hueRamp(a,b,hsl.x-(1./3.))
		);*/
	}
}

vec3 rgb2hsv(vec3 c)
{
    vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
    vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));
    vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));

    float d = q.x - min(q.w, q.y);
    float e = 1.0e-10;
    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);
}

vec3 hsv2rgb(vec3 c)
{
    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);
    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);
}

vec3 kelvinToRGB(float T) {
	float x = 0;
	float y = 0;
	if (T >= 1667 && T < 4000) 
		x = -0.2661239 * (pow(10,9) / pow(T, 3)) -0.2342589 * (pow(10,6) / pow(T, 2)) + 0.8776956 * (pow(10,3) / T) + 0.179910;
	else if (T >= 4000 && T < 25000) 
		x = -3.0258469 * (pow(10,9) / pow(T, 3)) +2.1070379 * (pow(10,6) / pow(T, 2)) + 0.2226347 * (pow(10,3) / T) + 0.240390;

	if (T >= 1667 && T < 2222)
		y = -1.1063814 * pow(x, 3) -1.34811020 * pow(x, 2) +2.18555832 * x - 0.20219683;
	else if (T >= 2222 && T < 4000)
		y = -0.9549476 * pow(x, 3) -1.37418593 * pow(x, 2) +2.09137015 * x - 0.16748867;
	else if (T >= 4000 && T < 25000)
		y =  3.0817580 * pow(x, 3) -5.87338670 * pow(x, 2) +3.75112997 * x - 0.37001483;

	return xyz2rgb(xyY2xyz(vec3(x,y,1)));
}


vec4 apply_sat(vec4 v) {
	vec3 hsv = rgb2hsl(v.xyz);
	hsv.y *= (1 + sat);
	vec3 rgb = hsl2rgb(hsv);
	return vec4(rgb, 1);
}

vec4 apply_wb(vec4 v) {
	//return v + vec4(wb, 0, -wb, 0);
	//int index = int(floor(wb));
	//vec3 temp = kelvin_table[index] / 255;
	vec3 tint_colour = vec3( 1 * min(1,tint), 1 * min(1,2-tint), 1 * min(1,tint));
	v *= vec4(tint_colour,1);

	return v * vec4(kelvinToRGB(wb),1);
}

vec4 apply_offset(vec4 v) {
	vec3 offset_colour = vec3(offset[1], offset[2], offset[3]);
	return v * vec4(offset_colour,1);
}

vec4 shift_hsl(vec4 v) {
	vec3 hsv_ = rgb2hsv(v.xyz);

	// hue vs
	hsv_.x = saturate_(hsv_.x + (SmoothCurveValue(hsv_.x, vec2(0), vec2(1), hue_hue) - 0.5) / 2); // scaling from -0.25 to 0.25
	hsv_.y = saturate_(hsv_.y + (SmoothCurveValue(hsv_.x, vec2(0), vec2(1), hue_sat) - 0.5) * 2); // scaling from -1 to 1
	hsv_.z = saturate_(hsv_.z + (SmoothCurveValue(hsv_.x, vec2(0), vec2(1), hue_lum) - 0.5) / 2); // scaling from -0.25 to 0.25

	// sat vs
	hsv_.x = saturate_(hsv_.x + (SmoothCurveValue(hsv_.y, vec2(0), vec2(1), sat_hue) - 0.5) / 2); // scaling from -0.25 to 0.25
	hsv_.y = saturate_(hsv_.y + (SmoothCurveValue(hsv_.y, vec2(0), vec2(1), sat_sat) - 0.5) * 2); // scaling from -1 to 1
	hsv_.z = saturate_(hsv_.z + (SmoothCurveValue(hsv_.y, vec2(0), vec2(1), sat_lum) - 0.5) / 2); // scaling from -0.25 to 0.25

	// lum vs
	hsv_.x = saturate_(hsv_.x + (SmoothCurveValue(hsv_.z, vec2(0), vec2(1), lum_hue) - 0.5) / 2); // scaling from -0.25 to 0.25
	hsv_.y = saturate_(hsv_.y + (SmoothCurveValue(hsv_.z, vec2(0), vec2(1), lum_sat) - 0.5) * 2); // scaling from -1 to 1
	hsv_.z = saturate_((SmoothCurveValue(hsv_.z, vec2(0), vec2(1), lum_lum))); // scaling from -1 to 1


	return vec4(hsv2rgb(hsv_),1);
}


vec4 get_corrected_pixel(ivec2 coord) {
	vec4 texColor = vec4(0);
	if (low_res)
		texColor = smartDeNoise(texture1_small, coord, dn_sigma, dn_ksigma, dn_thresh);
	else
		texColor = smartDeNoise(texture1, coord, dn_sigma, dn_ksigma, dn_thresh);
    // texColor.x = pow(texColor.x,2.5);
    // texColor.y = pow(texColor.y,2.5);
    // texColor.z = pow(texColor.z,2.5);
	return texColor;
}

vec4 convolution3x3(ivec2 origin, float kernel[9]) {
	vec4 result = vec4(0);
	for (int i = -1; i <= 1; i ++) {
		for (int j = -1; j <= 1; j ++) {
			result += kernel[(j+1) + (3*(i+1))] * get_corrected_pixel(origin + ivec2(i,j));
		}
	}
	return result;
}


float edit_channel(float v, int chr) {
	vec4 result = vec4(0);
	float t = saturate_(pow(2,expo[chr]) * v * (1 + whites[chr]));
	float val = saturate_((4 * pow((1-t),3) * t * (0.25 + low[chr])) + (6 * pow((1-t),2) * pow(t,2) * (0.5 + mid[chr])) + (4 * (1-t) * pow(t,3) * (0.75 + high[chr])) + (pow(t,4) * 1));
	float contrast = saturate_(contrast[chr] * ((sin(2*3.14*t)) / 4.0f));
	return saturate_(pow(gain[chr] * saturate_(((1 - lift[chr]) * val) + lift[chr]), gamma[chr]) + (-contrast));
}

float edit_channel_lum(float v) {
	return edit_channel(v, 0);
}

vec4 edit_channels(vec4 pix) {
	float sat_before = rgb2hsl(pix.rgb).y;
	vec3 res = (vec3(edit_channel(pix[2], 1),edit_channel(pix[1], 2),edit_channel(pix[0], 3)));
	vec3 lum = (vec3(edit_channel_lum(res[0]),edit_channel_lum(res[1]),edit_channel_lum(res[2])));
	vec3 hsv_after = rgb2hsl(lum.rgb);
	float sat_after = hsv_after.y;
	float sat_diff = sat_after - sat_before;
	hsv_after.y = sat_before + (sat_diff * sat_ref);
	return vec4(hsl2rgb(hsv_after), 1);
}

vec4 pixelTransform(vec4 pix, ivec2 coord, ivec2 tex_size) {
	vec4 result = vec4(1);

    if (b4) {
		vec4 result = vec4(pix.z, pix.y, pix.x, 1);
		if (bw) {
			result = vec4(vec3(calcLum(result)), 1);
		}
		return result;
	}

	
	result = saturate_(convolution3x3(coord, sharp_kernel));
	result = saturate_(edit_channels(result));
	result = saturate_(apply_offset(result));
	result = saturate_(apply_wb(result));
	result = saturate_(apply_sat(result));

	if (inv)
		result = vec4(-result.xyz + 1,0);

	vec3 yiq = rgb2yiq(result.xyz);
	yiq.y *= ((yiq_y) * 2 + 1);
	yiq.z *= ((yiq_z) * 2 + 1);
	result = vec4(yiq2rgb(yiq),1);

	vec3 xyz = rgb2xyz(result.xyz);
	xyz.y *= ((xyz_y) + 1);
	xyz.z *= ((xyz_z) + 1);
	result = vec4(xyz2rgb(xyz),1);

	result = shift_hsl(result);

	if (bw) {
		result = vec4(vec3(calcLum(result)), 1);
	}

	if (clip) {
		if (calcLum(result) == 0.0) {
			result = vec4(1.0, 1.0, 0.0, 1);
		}
		else if (calcLum(result) >= .99) {
			result = vec4(1.0, 0, 1.0, 1);
		}
	} 

	if (noise_selected){
		float r = rand(vec2(floor(coord.x), floor(coord.y)));
		r = -1 + (r * 2); // rescale to -1 to 1
		float var = pow((5-noise),2);
		float noise_ = ((1.0/(1.0 + pow(2.71,-(r/var)))) - 0.5)*2.0;
		result += noise_;
	}

    return saturate_(result);
}

void main() {
	ivec2 texSize = ivec2(0);
	if (low_res)
		texSize = textureSize(texture1_small, 0);
	else
		texSize = textureSize(texture1, 0);
    ivec2 pixelCoord = ivec2(gl_GlobalInvocationID.xy);

    // Ensure the current invocation is within the texture bounds
    if (pixelCoord.x < texSize.x && pixelCoord.y < texSize.y) {
        vec4 texColor = get_corrected_pixel(pixelCoord);

        texColor = pixelTransform(texColor, pixelCoord, texSize);

        if (histogram_loaded) {
            uint binIndex = uint(calcLum(texColor.bgr) * 255.0);
            //texColor = vec4(vec3(cdf[binIndex]), 1.0);
            //texColor = vec4(texColor.rgb * cdf[binIndex], 1.0);
        }

		if (low_res)
			imageStore(imgOutput_small, pixelCoord, texColor);
		else
			imageStore(imgOutput, pixelCoord, texColor);
        
    }


}
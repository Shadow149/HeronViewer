#version 440 core

layout (local_size_x = 32, local_size_y = 32, local_size_z = 1) in;

// ----------------------------------------------------------------------------
//
// uniforms
//
// ----------------------------------------------------------------------------

layout(rgba32f, binding = 0) uniform image2D img;

layout(binding=1) uniform sampler2D texture1;
	
layout(std430, binding=2) buffer hist {
    uint elements[];
};

layout(std430, binding=3) buffer hist_orig {
    uint elements_orig[];
};

layout(rgba32f, binding = 4) uniform image2D vectorscope_texture;
layout(rgba32f, binding = 5) uniform image2D waveform_texture;
//layout(r32i, binding = 6) uniform iimage2D waveform_acc;
//layout(r32i, binding = 7) uniform iimage2D vectorscope_acc;

layout(std430, binding=6) buffer waveform_acc {
    uint wave_els[];
};


layout(std430, binding=7) buffer vectorscope_acc {
    uint vec_els[];
};


uniform bool histogram_loaded;
uniform float var_mult;

shared uint local_bins[256*4];
shared uint orig_local_bins[256];

vec3 hsv2rgb(vec3 c)
{
    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);
    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);
}

vec3 rgb2hsv(vec3 c)
{
    vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
    vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));
    vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));

    float d = q.x - min(q.w, q.y);
    float e = 1.0e-10;
    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);
}

float circle_atan(float x, float y) {
    if (x > 0) return atan(y/x);
    if (x < 0 && y >= 0) return atan(y/x) + 3.14;
    if (x < 0 && y < 0) return atan(y/x) - 3.14;
    if (x == 0 && y > 0) return 3.14/2.0;
    if (x == 0 && y < 0) return -3.14/2.0;
    return 0;
}


vec2 cart2polar(vec2 c) {
    return vec2(sqrt(pow(c.x,2) + pow(c.y,2)), atan(c.y,c.x));
}

vec2 polar2cart(vec2 c) {
    return vec2(c.x * cos(c.y), c.x * sin(c.y));
}

float calcLum(vec3 v) {
    return dot(v, vec3(0.299, 0.587, 0.114));
}
float calcLum(vec4 v) {
    return calcLum(v.xyz);
}

void main() {
    ivec2 texSize = imageSize(img);
    ivec2 pixelCoord = ivec2(gl_GlobalInvocationID.xy);

    uint lid = gl_LocalInvocationID.x + gl_LocalInvocationID.y * 32;

    if (lid < 256) {
        local_bins[lid*4] = 0;
        local_bins[(lid*4)+1] = 0;
        local_bins[(lid*4)+2] = 0;
        local_bins[(lid*4)+3] = 0;

        if (!histogram_loaded) {
            orig_local_bins[lid] = 0;
        }
    }

    barrier();
    memoryBarrier();
  
    // Ensure the current invocation is within the texture bounds
    if (pixelCoord.x < texSize.x && pixelCoord.y < texSize.y && lid % 2 == 0) {
        vec4 texColor = imageLoad(img, pixelCoord);
        vec3 hsv = rgb2hsv(texColor.rgb);
        vec2 cart = polar2cart(vec2(hsv.y,hsv.x * 6.28318530718));
        cart.x = (cart.x * 128) + 128;
        cart.y = (cart.y * 128) + 128;
        ivec2 c = ivec2(cart);
        float grayscale = calcLum(texColor);

        uint binIndex = uint(grayscale * 255.0);

        uint rIndex = uint(texColor.b * 255.0) * 4;
        uint gIndex = uint(texColor.g * 255.0) * 4;
        uint bIndex = uint(texColor.r * 255.0) * 4;

      
        // Atomic increment to update the histogram bin value
        atomicAdd(local_bins[binIndex*4], 1);
        
        atomicAdd(local_bins[rIndex+1], 1);
        atomicAdd(local_bins[gIndex+2], 1);
        atomicAdd(local_bins[bIndex+3], 1);

        if (!histogram_loaded) {
            texColor = texelFetch(texture1, pixelCoord, 0);
            texColor.x = pow(texColor.x,2.5);
            texColor.y = pow(texColor.y,2.5);
            texColor.z = pow(texColor.z,2.5);
      
            // Convert color to grayscale
            grayscale = calcLum(texColor.bgr);
      
            // Convert grayscale value to histogram bin index
            binIndex = uint(grayscale * 255.0);
      
            // Atomic increment to update the histogram bin value
            atomicAdd(orig_local_bins[binIndex], 1);
        }

        atomicAdd(vec_els[c.x + c.y * 255], 1);


        ivec2 cc = ivec2( int( (float(pixelCoord.x)/float(texSize.x)) * 512), int(255 - clamp(binIndex, 0, 255)));
        atomicAdd(wave_els[cc.x + cc.y * 512], 1);


    }

    barrier();
    memoryBarrier();

    if (lid < 256) {
       atomicAdd(elements[lid*4], local_bins[lid*4]);
       atomicAdd(elements[(lid*4)+1], local_bins[(lid*4)+1]);
       atomicAdd(elements[(lid*4)+2], local_bins[(lid*4)+2]);
       atomicAdd(elements[(lid*4)+3], local_bins[(lid*4)+3]);

       if (!histogram_loaded) {
           atomicAdd(elements_orig[lid], orig_local_bins[lid]);
       }
    }

    if (lid % 2 == 0) {
        ivec2 foo = ivec2( int( (float(pixelCoord.x)/float(texSize.x)) * 512 ), int( (float(pixelCoord.y)/float(texSize.y)) * 255 ));
        int count = int(wave_els[foo.x + foo.y * 512]);
        imageStore(waveform_texture, foo, vec4(1) * count/float(texSize.x * texSize.y)*2 * var_mult * 20000);

        ivec2 bar = ivec2( int( (float(pixelCoord.x)/float(texSize.x)) * 255 ), int( (float(pixelCoord.y)/float(texSize.y)) * 255 ));
        int count_ = int(vec_els[bar.x + bar.y * 255]);
        vec2 n = bar - ivec2(128);
        vec3 hsv_ = vec3(cart2polar(vec2(n.x/ 255.0f, n.y / 255.0f)),1);
        vec4 col = vec4(hsv2rgb(vec3((hsv_.y ) / 6.28318530718 , hsv_.x*2, hsv_.z)),1);
        imageStore(vectorscope_texture, bar, col * (count_/float(texSize.x * texSize.y)*2 * var_mult * 2000));
    }
}